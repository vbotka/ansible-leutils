---

- name: "source: Test presence of {{ leutils_source_dest }}/le-utils-current.lock"
  stat:
    path: "{{ leutils_source_dest }}/le-utils-current.lock"
  register: leutils_current_lock

- debug: msg="DEBUG le-utils-current.lock file is present."
  when:
    - leutils_current_lock.stat.exists
    - not leutils_source_ignore_current_lock
    - leutils_debug

- name: "source: Create directory for the source code {{ leutils_source_dest }}"
  file:
    state: directory
    path: "{{ leutils_source_dest }}"

- name: "source: Download {{ leutils_source_url }}/{{ leutils_source_file }}"
  get_url:
    url: "{{ leutils_source_url }}/{{ leutils_source_file }}"
    dest: "{{ leutils_source_dest }}/le-utils-{{ leutils_source_file }}"

- name: "source: Extract sources to {{ leutils_source_dest }}"
  unarchive:
    src: "{{ leutils_source_dest }}/le-utils-{{ leutils_source_file }}"
    dest: "{{ leutils_source_dest }}"
    extra_opts: "--skip-old-files"
    remote_src: yes

- name: "source: Create symbolic link le-utils to {{ leutils_source_dir }}"
  file:
    src: "{{ leutils_source_dest }}/{{ leutils_source_dir }}"
    dest: "{{ leutils_source_dest }}/le-utils"
    state: link
    force: yes
  when: (not leutils_current_lock.stat.exists) or
         leutils_source_ignore_current_lock

- name: "source: Which bash"
  command: "which bash"
  register: leutils_which_bash
  changed_when: False

#- debug: msg="{{ leutils_which_bash.stdout }}"

- name: "source: Patch {{ leutils_which_bash.stdout }}"
  lineinfile:
    dest: "{{ leutils_source_dest }}/le-utils/{{ item }}"
    regexp: "#!"
    line: "#!{{ leutils_which_bash.stdout }}"
  with_items:
    - lectl
    - leinfo
  when: not ansible_check_mode

# EOF
...
