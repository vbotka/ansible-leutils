---

- name: Test lock file
  when: not leutils_ignore_lock | bool
  block:

    - name: "Source: Test presence of {{ leutils_source_dest ~ '/le-utils-current.lock' }}"
      register: leutils_lock
      ansible.builtin.stat:
        path: "{{ leutils_source_dest }}/le-utils-current.lock"

    - name: "Source: Debug le-utils-current.lock leutils_debug={{ leutils_debug }}"
      when:
        - leutils_lock.stat.exists
        - leutils_debug | bool
      ansible.builtin.debug:
        msg: |
          [LOCK] le-utils-current.lock file is present. Link to source will not be created.

- name: Download source
  tags: leutils_download
  block:

    - name: "Source: Create directory for the source code {{ leutils_source_dest }}"
      ansible.builtin.file:
        state: directory
        path: "{{ leutils_source_dest }}"
        mode: "{{ leutils_source_dest_mode }}"

    - name: "Source: Download {{ leutils_source_url ~ '/' ~ leutils_source_file }}"
      environment:
        CRYPTOGRAPHY_OPENSSL_NO_LEGACY: '1'
      ansible.builtin.get_url:
        url: "{{ leutils_source_url }}/{{ leutils_source_file }}"
        dest: "{{ leutils_source_dest }}/le-utils-{{ leutils_source_file }}"
        mode: "0644"
        checksum: "{{ leutils_source_checksum }}"

- name: Extract source
  tags: leutils_extract
  block:

    - name: "Source: Check existence of {{ leutils_source_url ~ '/' ~ leutils_source_file }}"
      register: leutils_source_file_downloaded
      ansible.builtin.stat:
        path: "{{ leutils_source_dest }}/le-utils-{{ leutils_source_file }}"

    - name: "Source: Extract sources to {{ leutils_source_dest ~ '/' ~ leutils_source_dir }}"
      when: leutils_source_file_downloaded.stat.exists
      environment:
        CRYPTOGRAPHY_OPENSSL_NO_LEGACY: '1'
      ansible.builtin.unarchive:
        src: "{{ leutils_source_dest }}/le-utils-{{ leutils_source_file }}"
        dest: "{{ leutils_source_dest }}"
        extra_opts: "{{ leutils_unarchive_extra_opts }}"
        remote_src: true
        keep_newer: true
        creates: "{{ leutils_source_dest }}/{{ leutils_source_dir }}"

- name: "Source: Debug leutils_lock leutils_debug={{ leutils_debug }}"
  when: leutils_debug | bool
  ansible.builtin.debug:
    msg: |
      leutils_lock.stat.exists: {{ leutils_lock.stat.exists }}
      leutils_ignore_lock: {{ leutils_ignore_lock }}

- name: "Source: Create symbolic link le-utils to {{ leutils_source_dir }}"
  when: not leutils_lock.stat.exists or leutils_ignore_lock | bool
  ansible.builtin.file:
    state: link
    src: "{{ leutils_source_dest }}/{{ leutils_source_dir }}"
    dest: "{{ leutils_source_dest }}/le-utils"
    force: true

- name: Update bash path in scripts
  block:

    - name: "Source: Which bash"
      register: leutils_which_bash
      check_mode: false
      changed_when: false
      ansible.builtin.command: which bash

    - name: "Source: Debug leutils_which_bash leutils_debug={{ leutils_debug }}"
      when: leutils_debug | bool
      ansible.builtin.debug:
        var: leutils_which_bash.stdout | trim

    - name: "Source: Patch {{ leutils_which_bash.stdout }}"
      ansible.builtin.lineinfile:
        dest: "{{ leutils_source_dest }}/le-utils/{{ item }}"
        regexp: ^#!.*$
        line: "#!{{ leutils_which_bash.stdout }}"
      loop:
        - lectl
        - leinfo

# EOF
